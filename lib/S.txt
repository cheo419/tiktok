#sign up screen
SafeArea = safearea를 사용하면 그안에 있는 모든것은 특정 공간에 있을거라고 보장함 ex)상태바같이 그 공간은 확실하게 뭔가에 가려지지않게끔

#login screen
Navigator.of(context).push() = 화면을 위에 올려놓음
Navigator.of(context).pop() = 화면을 없앰(=뒤로가기)
FractionallySizedBox(Widget) = 기본적으로 box위젯인데 크기를 단순히 픽셀로 정하는게 아니라 부모의 크기에 비례해서 크기를 정하게 해주는 위젯
ex)부모의 크기가 1000px이고 FractionallySizedBox의 widthFactor가 1 이라면 FractionallySizedBox의 너비는 부모의 너비의 100%가 될것이고 widthFactor가 0.5로 설정되어있고 부모의 너비가 1000px 이라면 FractionallySizedBox의 너비는 500px이 될것임

#authbutton
Stack(widget) = stack을 이해하기위한 설명 : Column이 어떤역활을 하는지 기억해보면 여러 위젯들을 세로로 차례대로 배치할수있게 해줌, row는? 위젯들을 옆으로 배치할수있게 해줌, stack은 위에다가 쌓을수있게 해줌, 말그대로 위에 쌓을수 있게끔 팬케이크처럼
Align(widget) = 하나의 정렬만 바꿀수있게 해줌

#sing up form
tip) 메서드앞에 _ 언더바 쓰기 생활화하기(이유는 다른언어처럼 퍼블릭 프라이빗 프로텍드 같은게 없기때문에 _로 프라이빗이라고 표시해두는것)

#username screen
TextField() = html input 느낌
cursorColor = 글씨쓸때 깜빡이는 모션 색깔
hintText = html placeholder 느낌
bordercolor = 밑줄색깔
코드참조설명생략(포커싱됬을때안됬을때밑줄) = 
enabledBorder: UnderlineInputBorder(
borderSide: BorderSide(
color: Colors.grey.shade400,
),
),
focusedBorder: UnderlineInputBorder(
borderSide: BorderSide(
color: Colors.grey.shade400,
Controller = 코드,메서드 등으로 textfield와 같은 위젯을 컨트롤 할수있게해줌, statefulwidget써야함
AnimatedContainer = decoration이 바뀌었을때 애니메이션 효과를 넣어줌

#formbutton
AnimatedDefaultTextStyle = 텍스트가 바뀔때 애니메이션 효과를 줌
tip) extract widget을 했을때 변수설정을 보면 밑줄로 시작하는 named parameter를 정의할수없기때문에 (코드참조) disabled로 바꿨다.
tip) dispose할때 super.dispose()를 모든것에 뒤에 선언하는것이 옳다. initState()를 다른 모든것의 앞에 두는것처럼
tip)username 화면에서 _onNextTap()은 context를 받는것이 필요하지않다 그이유는 statefulwidget 안의 state안에 있다면 어디서든 context를 사용할수 있기 때문, onTap: () => _onNextTap(context) 원한다면 이런식으로 넘겨줄수도 있지만 그럴 필요는 없음